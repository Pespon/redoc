openapi: 3.0.3
info:
  title: eswin-extranet API
  description: EWW WIP eswin-extranet API
  version: 0.0.1
servers:
- url: https://eswin-extranet.staging7.novaway.net/api
tags:
- name: "clinic"
- name: "user"
- name: "clinic member"
- name: "patient"
- name: "patient authorization"
- name: "report"

paths:
  /new_users:
    summary: "Send users created on tearcheck, retrieve their cloud id and password"
    post:
      tags:
      - 'user'
      summary: "Send users created on offline tearcheck, retrieve their cloud id and password"
      operationId: "sendNewUser"
      requestBody:
        description: "Tearcheck local users. The cloud should create non-existent users with the provided data, if the user already exist no change are made. No password is send since newly created users shall configure their passwords when they activate their accounts via email, if the account is already activated the cloud password is keeped."
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserNoPassword'
        required: true
      responses:
        200:
          description: "Successful operation. The response contains the users informations that the tearcheck shall update as well as the old id of the users on the tearcheck. Password related field shall be empty if the account is not yet activated."
          content:
            'application/json':
              schema:
                type: array
                items:
                  allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        example: 42
                      initial_id:
                        type: integer
                        example: 11
                  - $ref: '#/components/schemas/UserMandatoryData'
                  - $ref: '#/components/schemas/PasswordData'
  
        400:
          description: "Invalid Users"
          content: {}
      x-codegen-request-body-name: body

  /all_tearcheck_users:
    get:
      tags:
      - 'user'
      summary: "Retrieve users authorized in at least one the clinic authorized on this Tearcheck. If a user only have a pending authorization only the id field is send for this user."
      operationId: "getUsers"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSmall'

  /user:
    get:
      tags:
      - 'user'
      summary: "Restrieve loged-in user."
      operationId: "getUser"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - 'user'
      summary: "Update loged-in user"
      operationId: "updateUser"
      requestBody:
        description: "user updated info"
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: "Successful operation"
          content: {}
        400:
          description: Error
          content: {}
      x-codegen-request-body-name: body

  /all_tearcheck_clinics:
    get:
      tags:
      - 'clinic'
      summary: "Restrieve clinics authorized on this Tearcheck."
      operationId: "getClinics"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Clinic'

  /new_clinic_members:
    post:
      tags:
      - 'clinic member'
      summary: "Send clinic member created on offline tearcheck, retrieve there cloud id."
      operationId: "sendNewClinicMember"
      requestBody:
        description: "Tearcheck local clinic member. The cloud should create non-existent member with the provided data. If the member already exist nothing is done."
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClinicMemberPostInput'
        required: true
      responses:
        200:
          description: "Successful operation. The response contains the clinic members informations that the tearcheck shall update as well as the old id of the clinic members on the tearcheck."
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClinicMemberPostOutput'
        400:
          description: "Invalid Users."
          content: {}
      x-codegen-request-body-name: body

  /all_tearcheck_clinic_members:
    get:
      tags:
      - 'clinic member'
      summary: "Retrieve clinic member authorized in at least one the clinic authorized on this Tearcheck. If a clinic member only have a pending authorization only the id field is send for this user."
      operationId: getClinicMembers
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClinicMember'

  /clinic_member:
    put:
      tags:
      - 'clinic member'
      summary: "Update clinic member. Loged in user must be authorized to perform the modification"
      operationId: "updateClinicMember"
      requestBody:
        description: "user updated info"
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClinicMemberUpdate'
        required: true
      responses:
        200:
          description: "Successful operation"
          content: {}
        400:
          description: Error
          content: {}
      x-codegen-request-body-name: body

  /all_user_patients:
    get:
      tags:
      - 'patient'
      summary: "Retrieves patients who have authorized the logged-in user through a clinic that is accessible via this Tearcheck."
      operationId: "getUserAllPatient"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'

  /new_patients:
    post:
      tags:
      - 'patient'
      summary: "Send patients created on tearcheck, retrieve their cloud id"
      operationId: "sendNewPatients"
      requestBody:
        description: "Tearcheck local patients. The cloud shall create non-existent patients with the provided data, if the patients already exist no change are made."
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatientPostInput'
        required: true
      responses:
        200:
          description: "Successful operation. The response contains the patients old ind and cloud id. The tearcheck shall update the old id of the patients."
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  properties:
                    cloud_id:
                      type: integer
                      example: 42
                    tc_id:
                      type: integer
                      example: 11
                    status:
                      type: integer
        400:
          description: "Invalid Users"
          content: {}

  /all_tearcheck_patients_ids:
    get:
      tags:
      - 'patient'
      summary: "Retrieves the ids of patients who authorized at least one of the authorized clinics on this Tearcheck. This should allow the Tearcheck to remove the patients it has lost access to."
      operationId: "getPatients"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
              example: [42, 43, 44]
        400:
          description: Error
          content: {}

  /all_tearcheck_patients_authorizations:
    get:
      tags:
      - 'patient authorization'
      summary: "Retrieves all patients authorizations."
      operationId: "getAllPatientsAuthorisationIds"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientAuthorization'
        400:
          description: Error
          content: {}

  /new_patients_authorizations:
    post:
      tags:
      - 'patient authorization'
      summary: "Send patients authorisations created on tearcheck, retrieve their cloud id."
      operationId: "sendNewPatientsAuthorizations"
      requestBody:
        description: "Tearcheck local patients. The cloud shall create non-existent patients with the provided data, if the patients already exist no change are made. id is the patient local id."
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatientAuthorization'
        required: true
      responses:
        200:
          description: "Successful operation. The response contains the patients old ind and cloud id. The tearcheck shall update the old id of the patients (initial_id) by the patients new id (id)"
          content:
            '*/*':
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/PatientAuthorization'
                    - properties:
                        initial_id:
                          description: "id sended by the tearcheck"
                          type: integer
                          example: 11
        400:
          description: "Invalid Users"
          content: {}

  /report:
    post:
      tags:
        - 'report'
      summary: "Send reports created on offline tearcheck, retrieve their cloud id. This request is multipart.."
      operationId: "sendReport"
      requestBody:
        description: "Tearcheck local reports. The cloud shall create non-existent reports with the provided data, if the report already exist no change are made."
        content:
          'multipart/mixed':
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        200:
          description: "Successful operation. The response contains the reports old id and cloud id. The Tearcheck shall update the old id of the reports."
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: object
                  properties:
                    initial_id:
                      type: integer
                      example: 11
                    id:
                      type: integer
                      example: 12
              
        400:
          description: Error
          content: {}

  /all_patient_reports_ids/{patient_id}:
    get:
      tags:
        - 'report'
      summary: "Retrieves the ids of patient reports."
      operationId: "getPatientsReportsIds"
      parameters:
        - in: path
          name: patient_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
              example: [42, 43, 44]
        400:
          description: Error
          content: {}

  /report/{report_id}:
    get:
      tags:
        - 'report'
      summary: "Retrieves reports"
      operationId: "getReport"
      parameters:
        - in: path
          name: report_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: "Successful operation"
          content:
            'multipart/mixed':
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Error
          content: {}

components:
  schemas:

    PasswordData:
      properties:
        hashed_password:
          type: string
          format: binary
          example: "ds4fd57gVhs54gsJ4"
        password_salt:
          type: string
          format: binary
          example: "8hfgZ8fhY42WGj"

    UserMandatoryData:
      properties:
        firstName:
          type: string
          example: "Jean"
        lastName:
          type: string
          example: "Dupond"
        email:
          type: string
          example: "jean.dupond@dupond.com"
        birthDate:
          type: string
          example: "1980-10-10"
  
    UserSmall:
      allOf:
      - type: object
        properties:
          id:
            type: integer
            example: 42
      - $ref: '#/components/schemas/UserMandatoryData'
      - $ref: '#/components/schemas/PasswordData'
  
    UserNoPassword:
      allOf:
      - type: object
        properties:
          id:
            type: integer
            example: 42
          address:
            type: string
            example: "25 place de la mairie"
          city:
            type: string
            example: "Lyon"
      - $ref: '#/components/schemas/UserMandatoryData'
  
    User:
      allOf:
      - $ref: '#/components/schemas/UserNoPassword'
      - $ref: '#/components/schemas/PasswordData'
  
    Clinic:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "clinic 1"
        address:
          type: string
          example: "15 rue Jules Vallès"
        city:
          type: string
          example: "Villeurbanne"
        zipCode:
          type: string
          example: "69100"
        country:
          type: string
          example: "France"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        owner_id:
          type: integer
          description: user ID
          example: 1
  
    ClinicMemberPostInput:
      type: object
      properties:
        tc_id:
          type: integer
          example: 12
        user_id:
          type: integer
          example: 42
        clinic_id:
          type: integer
          example: 42
        creator_id:
          type: integer
          example: 42
        some_privilege:
          type: integer
          example: 1
        some_other_privilege:
          type: integer
          example: 0
  
    ClinicMemberPostOutput:
      type: object
      properties:
        tc_id:
          type: integer
          example: 12
        cloud_id:
          type: integer
          example: 42
        user_id:
          type: integer
          example: 42
        clinic_id:
          type: integer
          example: 42
        creator_id:
          type: integer
          example: 42
        some_privilege:
          type: integer
          example: 0
        some_other_privilege:
          type: integer
          example: 0
  
    ClinicMember:
      type: object
      properties:
        id:
          type: integer
          example: 12
        user_id:
          type: integer
          example: 42
        clinic_id:
          type: integer
          example: 42
        creator_id:
          type: integer
          example: 42
        some_privilege:
          type: integer
          example: 1
        some_other_privilege:
          type: integer
          example: 0
  
    ClinicMemberUpdate:
      type: object
      properties:
        id:
          type: integer
          example: 12
        clinic_id:
          type: integer
          example: 42
        some_privilege:
          type: integer
          example: 1
        some_other_privilege:
          type: integer
          example: 0
  
    Patient:
      type: object
      properties:
        id:
          type: integer
          example: 42
        firstName:
          type: string
          example: "Jean"
        lastName:
          type: string
          example: "Dupond"
        email:
          type: string
          example: "Jean.dupond@dupond.com"
        phoneNumber:
          type: string
          example: "0606060606"
        status:
          type: string
          description: "User Status"
          enum:
          - "STATUS_INCOMPLETE"
          - "STATUS_ACTIVE"
          - "STATUS_INACTIVE"
        birthDate:
          type: string
          example: "1980-10-10"
        address:
          type: string
          example: "25 place de la mairie"
        city:
          type: string
          example: "Lyon"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  
    PatientPostInput:
      type: object
      properties:
        tc_id:
          type: integer
          example: 11
        firstName:
          type: string
          example: "Jean"
        lastName:
          type: string
          example: "Dupond"
        email:
          type: string
          example: "Jean.dupond@dupond.com"
        phoneNumber:
          type: string
          example: "0606060606"
        birthDate:
          type: string
          example: "1980-10-10"
        address:
          type: string
          example: "25 place de la mairie"
        city:
          type: string
          example: "Lyon"
  
    PatientAuthorization:
      type: object
      properties:
        id:
          type: integer
          example: 11
        patient_id:
          type: integer
          example: 11
        clinic_id:
          type: integer
          example: 11
        creator_id:
          description: "Id of the clinic member who added this authorization"
          type: integer
          example: 11
        creation_date:
          type: string

    ExaminationType:
      type: string
      example: "ExaminationType_NIBUT_V_1_0_0"
      enum:
      - "ExaminationType_NIBUT_V_1_0_0"
      - "ExaminationType_TFSE_V_1_0_0"
      - "ExaminationType_Meibography_V_1_0_0"
      - "ExaminationType_OSIE_V_1_0_0"
      - "ExaminationType_TearMeniscus_V_1_0_0"

      
    ReportNibut:
      allOf:
      - $ref: '#/components/schemas/Report'
      - properties:
          left_side:
            type: integer
            format: boolean
          right_side:
            type: integer
            format: boolean
          image:
            type: string
            format: binary
          breakup_time_ms:
            type: integer

    ReportTfse:
      allOf:
      - $ref: '#/components/schemas/Report'
      - properties:
          left_side:
            type: integer
            format: boolean
          right_side:
            type: integer
            format: boolean
          image:
            type: string
            format: binary
          score_data:
            type: string
            format: binary

    ReportMeibography:
      allOf:
      - $ref: '#/components/schemas/Report'
      - properties:
          left_side:
            type: integer
            format: boolean
          right_side:
            type: integer
            format: boolean
          image_base:
            type: string
            format: binary
          image_processed:
            type: string
            format: binary
          image_3d:
            type: string
            format: binary
          score_data:
            type: string
            format: binary
  
    ReportOsie:
      allOf:
      - $ref: '#/components/schemas/Report'
      - properties:
          left_side:
            type: integer
            format: boolean
          right_side:
            type: integer
            format: boolean
          image:
            type: string
            format: binary
          score:
            type: integer

    ReportTearMeniscus:
      allOf:
      - $ref: '#/components/schemas/Report'
      - properties:
          left_side:
            type: integer
            format: boolean
          right_side:
            type: integer
            format: boolean
          image:
            type: string
            format: binary
          tear_meniscus_size:
            type: integer
          tear_meniscus_size_v2:
            type: integer

    Report:
      type: object
      allOf:
      - required:
        - examination_type
      - properties:
          examination_type:
            $ref: "#/components/schemas/ExaminationType"
          patient_id:
            type: integer
          creator_id:
            type: integer
            description: 'Id of the clinic member who performed the examination'
      - discriminator:
          propertyName: examination_type
          mapping:
            ExaminationType_NIBUT_V_1_0_0: '#/components/schemas/ReportNibut'
            ExaminationType_TFSE_V_1_0_0: '#/components/schemas/ReportTfse'
            ExaminationType_Meibography_V_1_0_0: '#/components/schemas/ReportMeibography'
            ExaminationType_OSIE_V_1_0_0: '#/components/schemas/ReportOsie'
            ExaminationType_TearMeniscus_V_1_0_0: '#/components/schemas/ReportTearMeniscus'
          

    Tearcheck:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        serialNumber:
          type: string
          example: DV-TC1S
        validityDate:
          type: string
          format: date-time
        nextPaymentDate:
          type: string
          format: date-time
        location:
          type: string
          example: Somewhere
        name:
          type: string
          example: DV-TC1S
        userOwner:
          type: integer
          description: User ID
          example: 1

  securitySchemes:
    tearcheck_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
